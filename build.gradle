buildscript {
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
    repositories {
        maven {
            url 'http://jws.forteholding.ru/nexus/content/repositories/central'
        }
    }
}

plugins {
    id 'com.github.johnrengelman.shadow' version '1.2.3'
    id "net.cockamamy.gradle.javarepl" version "0.10.0"
}

def getVersionName = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags', '--always'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

def projectName = 'RHVoice-gui'
def mainClass = 'psyriccio.rhvoicegui.Main'
version = getVersionName()
//group = 'public'
ext.mainClass = mainClass


def appName =  { ->
    return projectName
}

apply plugin: 'maven'
apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'

repositories {
    maven {
        url 'http://jws.forteholding.ru/nexus/content/repositories/dev'
    }
    maven {
        url 'http://jws.forteholding.ru/nexus/content/repositories/central'
    }
    maven {
        url 'https://raw.github.com/Ekito/maven-repo/master/releases'
    }
    maven {
        url 'http://jws.forteholding.ru/nexus/content/repositories/openimaj/'
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': projectName,
                   'Implementation-Version': version,
                   'Main-Class': mainClass,
                   'Permissions': 'all-permissions'

    }
}

shadowJar {
    baseName = projectName
    classifier = 'all'
    version = getVersionName()
    dependencies {
        exclude(dependency('com.google.android:android:.*'))
        exclude(dependency('org.eclipse.swt.win32.win32:.*'))
    }
}

dependencies {
    compile group: 'com.typesafe', name: 'config', version: '1.3.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.7'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.22'
    compile group: 'com.google.guava', name: 'guava', version: '21.0'
    compile group: 'org.apache.commons', name: 'commons-compress', version: '1.13'
    compile group: 'org.java.net.substance', name: 'substance', version: '6.0'
    compile fileTree(dir: 'lib').matching { include '*.jar'}
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'src'
            include '**/*.png'
            include '**/*.gif'
            include '**/*.xml'
            include '**/*.properties'
            include '**/*.jks'
            include '**/*.ansi'
        }
    }
}

task copyDeps(type: Copy, dependsOn: assemble) {
    from configurations.compile
    into 'libs'
}

task distDebug(type: Exec) {
    standardOutput = new ByteArrayOutputStream()
    commandLine 'cp',
        buildDir.toString() + '/libs/*.jar',
        rootDir.toString() + '/'
}

task distRelease(type: Exec, dependsOn: shadowJar) {
    standardOutput = new ByteArrayOutputStream()
    commandLine 'cp',
        '-f',
    buildDir.toString() + '/libs/' + projectName + '-' + getVersionName() + '-all.jar',
        rootDir.toString() + '/'
}

task markLastRelease(dependsOn: distRelease) {
    def lastBuildFile = new File(rootDir, "lastbuild")
    if(lastBuildFile.exists()) {
        lastBuildFile.delete()
    }
    lastBuildFile.write(projectName + "-" + getVersionName() + "-all.jar")
}

task uploadBuild(type: Exec, dependsOn: markLastRelease) {
    standardOutput = new ByteArrayOutputStream()
    commandLine 'scp',
    rootDir.toString() + '/' + projectName + '-' + getVersionName() + '-all.jar',
        'jws:/srv/http/prj/' + projectName + '/'
}

def nexusUrl = 'http://jws.forteholding.ru/nexus'
def nexusUsername = /*GITRPL*/"deployment"/*TO'"user"'END*/
def nexusPassword = /*GITRPL*/'oM$7tpd/2~/FH3@%'/*TO'"***secret***"'END*/

artifacts {
    archives jar
    archives shadowJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "${nexusUrl}/content/repositories/dev") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }
            snapshotRepository(url: "${nexusUrl}/content/repositories/dev") {
                authentication(userName: nexusUsername, password: nexusPassword)
            }
        }
    }
}

task mkRelease(dependsOn: markLastRelease) {
    // META
}

task mkReleaseUpload(dependsOn: uploadBuild) {
    // META
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.1'
}
